# Day 13

```elixir
Mix.install([
  {:kino_benchee, git: "https://github.com/livebook-dev/kino_benchee"}
])
```

## Import Data

```elixir
data = File.read!("/Users/theodowling/Source/elixir/advent-of-code-2022/data/day13.txt")

test_input = """
[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]
"""
```

```elixir
defmodule Day13 do
  def compare([], [_b | _rest2]), do: :lt
  def compare([], []), do: :eq
  def compare([_a | _rest1], []), do: :gt

  def compare([a | rest1], [b | rest2]) do
    outcome =
      cond do
        is_integer(a) and is_integer(b) and a < b -> :lt
        is_integer(a) and is_integer(b) and a == b -> :eq
        is_integer(a) and is_integer(b) and a > b -> :gt
        is_list(a) and is_list(b) -> compare(a, b)
        is_list(a) and is_integer(b) -> compare(a, [b])
        is_integer(a) and is_list(b) -> compare([a], b)
      end

    if outcome == :eq, do: compare(rest1, rest2), else: outcome
  end
end
```

## Part 1

```elixir
defmodule Part1 do
  def main(input) do
    input
    |> String.split("\n\n", trim: true)
    |> Enum.map(fn pair ->
      [left, right] =
        pair
        |> String.split("\n", trim: true)
        |> Enum.map(fn line -> Code.eval_string(line) |> elem(0) end)

      Day13.compare(left, right)
    end)
    |> Enum.with_index(1)
    |> Enum.reject(fn {outcome, i} -> outcome == :gt end)
    |> Enum.map(&elem(&1, 1))
  end
end

Part1.main(test_input) |> Enum.sum() == 13
Part1.main(data) |> Enum.sum()
# > 1495 < 6225
```

## Part 2

```elixir
defmodule Part2 do
  def main(input) do
    input
    |> String.split(["\n\n", "\n"], trim: true)
    |> Enum.map(fn line -> Code.eval_string(line) |> elem(0) end)
    |> Kernel.++([[[2]], [[6]]])
    |> Enum.sort_by(& &1, Day13)
    |> Enum.with_index(1)
    |> Enum.filter(fn {outcome, _} -> outcome in [[[2]], [[6]]] end)
    |> Enum.map(&elem(&1, 1))
    |> Enum.product()
  end
end

Part2.main(test_input) == 140
Part2.main(data)
```

## Benchmarks

```elixir
defmodule BenchmarkTests do
  @data File.read!("/Users/theodowling/Source/elixir/advent-of-code-2022/data/day13.txt")

  def part1 do
    @data |> Part1.main()
  end

  def part2 do
    @data |> Part2.main()
  end
end

Benchee.run(
  %{
    "part1" => &BenchmarkTests.part1/0,
    "part2" => &BenchmarkTests.part2/0
  },
  time: 1,
  memory_time: 1,
  reduction_time: 1
)
```
